# Script to generate the optimized code for 'user_contact_kinematics.cc'
#
# takes two argument: the first one is the input accelred c file generated by the Robotran
#                     the second one is the output c file to generate
# example: python kinematics_gen.py mbs_accelred_my_model.c user_kinematics_model.c
import sys

# count the number of 'elem' in the file
def count_elem(in_file, elem):

	count = 0;

	with open(in_file,'r') as f:

		# loop on all the lines
		for line in f:
			cut_line = line.split(elem)
			if len(cut_line) == 2:
				count += 1

	return count

# print intro
def print_intro(out_write):
	out_write.write('#include \"mbs_data.h\"\n\n')
	out_write.write('#include \"math.h\"\n\n')
	out_write.write('/*! \\brief compute the kinematics model of sensors with ExtForces\n')
	out_write.write(' * \n')
	out_write.write(' * \param[in] mbs_data Robotran structure\n')
	out_write.write(' * \param[out] PxF_tab tabular with all the \'PxF\' computed\n')
	out_write.write(' * \param[out] RxF_tab tabular with all the \'RxF\' computed\n')
	out_write.write(' * \param[out] VxF_tab tabular with all the \'VxF\' computed\n')
	out_write.write(' * \param[out] OMxF_tab tabular with all the \'OMxF\' computed\n')
	out_write.write(' */\n')
	out_write.write('void user_kinematics_model(MbsData *mbs_data, double **PxF_tab, double ***RxF_tab, double **VxF_tab, double **OMxF_tab)\n')
	out_write.write('{\n')
	out_write.write('    // variables declaration\n')
	out_write.write('    int i, j;\n')
	out_write.write('    double *q, *qd;\n')
	out_write.write('    double **dpt;\n\n')

# print one line of the output declaration
def print_declaration_line_out(out_write, nb_sens, name, flag_two):

	if nb_sens >= 1:
		if flag_two:
			out_write.write('    double {}1[4][4]'.format(name))
		else:
			out_write.write('    double {}1[4]'.format(name))

		for i in range(1, nb_sens):
			if flag_two:
				out_write.write(', {}{}[4][4]'.format(name, i+1))
			else:
				out_write.write(', {}{}[4]'.format(name, i+1))

		out_write.write(';\n')

# print the declaration of an element
def print_declaration_elem(in_file, out_write, elem):

	if count_elem(in_file, '{}'.format(elem)) >= 1:

		count = 0

		with open(in_file,'r') as f:

			# loop on all the lines
			for line in f:
				cut_line = line.split(' = {}'.format(elem))

				if len(cut_line) == 2:
					if count == 0:
						out_write.write('    double {}'.format(cut_line[0].strip()))
					else:
						out_write.write(', {}'.format(cut_line[0].strip()))
					count += 1

					if count == 30:
						out_write.write(';\n')
						count = 0

		if count != 0:
			out_write.write(';\n')

# print the line of an element
def print_line_elem(in_file, out_write, elem):

	if count_elem(in_file, '{}'.format(elem)) >= 1:

		with open(in_file,'r') as f:

			# loop on all the lines
			for line in f:
				cut_line = line.split(' = {}'.format(elem))

				if len(cut_line) == 2:
					out_write.write('    {}'.format(line))

# print the declaration of the variables between 'start_line' and 'finish_line'
def print_declaration_var(in_file, out_write, start_line, finish_line):

	count  = 0
	start  = 0
	finish = 0

	with open(in_file,'r') as f:

		# loop on all the lines
		for line in f:

			cut_line_start  = line.split(start_line)
			cut_line_finish = line.split(finish_line)

			if len(cut_line_start) == 2:
				start = 1
			elif len(cut_line_finish) == 2:
				finish = 1
			elif (start == 1) and (finish == 0):
				cut_line = line.split(' = ')

				if len(cut_line) == 2:

					elem = cut_line[0].strip()

					cut_elem = elem.split('[')

					if len(cut_elem) == 1:

						if count == 0:
							out_write.write('    double {}'.format(elem))
						else:
							out_write.write(', {}'.format(elem))
						count += 1

						if count == 15:
							out_write.write(';\n')
							count = 0

	if count != 0:
		out_write.write(';\n')

# print the accelred sensors computation between 'start_line' and 'finish_line'
def print_computation(in_file, out_write, start_line, finish_line):

	start  = 0
	finish = 0

	with open(in_file,'r') as f:

		# loop on all the lines
		for line in f:

			cut_line_start  = line.split(start_line)
			cut_line_finish = line.split(finish_line)

			if len(cut_line_start) == 2:
				start = 1
			elif len(cut_line_finish) == 2:
				finish = 1
			elif (start == 1) and (finish == 0):
				if line.strip() != '':
					out_write.write('    {}'.format(line.lstrip()))

# print the output writing for one element
def print_out_elem(out_write, nb_sens, elem, flag_two):

	if nb_sens >= 1:

		out_write.write('    for(i=1; i<=3; i++)\n')
		out_write.write('    {\n')

		if flag_two:
			out_write.write('        for(j=1; j<=3; j++)\n')
			out_write.write('        {\n')

		for i in range(0, nb_sens):
			if flag_two:
				out_write.write('        {}_tab[{}][i][j] = {}{}[i][j];\n'.format(elem, i, elem, i+1))
			else:
				out_write.write('        {}_tab[{}][i] = {}{}[i];\n'.format(elem, i, elem, i+1))

		if flag_two:
			out_write.write('        }\n')

		out_write.write('    }\n\n')

# print the output writing
def print_out(out_write, nb_sens):
	print_out_elem(out_write, nb_sens, 'PxF', 0)
	print_out_elem(out_write, nb_sens, 'RxF', 1)
	print_out_elem(out_write, nb_sens, 'VxF', 0)
	print_out_elem(out_write, nb_sens, 'OMxF', 0)
	

# generate output file
def gen_out_file(in_file, out_file):

	out_write = open(out_file,'w')

	print_intro(out_write)

	nb_sens = count_elem(in_file, 'user_ExtForces')

	print_declaration_line_out(out_write, nb_sens, 'PxF', 0)
	print_declaration_line_out(out_write, nb_sens, 'RxF', 1)
	print_declaration_line_out(out_write, nb_sens, 'VxF', 0)
	print_declaration_line_out(out_write, nb_sens, 'OMxF', 0)
	out_write.write('\n')

	print_declaration_elem(in_file, out_write, 'cos')
	print_declaration_elem(in_file, out_write, 'sin')
	out_write.write('\n')

	print_declaration_var(in_file, out_write, 'Augmented Joint Position Vectors', 'Forces and Torques computation') # links
	print_declaration_var(in_file, out_write, 'Sensor Kinematics', 'Sensor Forces') # main sensors computation
	out_write.write('\n')

	out_write.write('    // variables initialization\n')
	out_write.write('    q   = mbs_data->q;\n')
	out_write.write('    qd  = mbs_data->qd;\n')
	out_write.write('    dpt = mbs_data->dpt;\n\n')

	out_write.write('    // cosines and sines\n')
	print_line_elem(in_file, out_write, 'cos')
	print_line_elem(in_file, out_write, 'sin')
	out_write.write('\n')

	out_write.write('    // main computation\n')
	print_computation(in_file, out_write, 'Augmented Joint Position Vectors', 'Forces and Torques computation') # links
	print_computation(in_file, out_write, 'Sensor Kinematics', 'Sensor Forces') # main sensors computation

	out_write.write('    // output copy\n')
	print_out(out_write, nb_sens)

	out_write.write('}\n')

	out_write.close()

# main
if len(sys.argv) == 3:
	in_file  = sys.argv[1]
	out_file = sys.argv[2]
	gen_out_file(in_file, out_file)

fitness: 2104.37660102453

norms:
0.294630854837404
0.33456378773776
0.090012970634497
0.857765287708347
0.710242905201303
0.919091112424067
0.582288337909478
0.075212097381226
0.902808478688139
0.0012361990873356
0.0843548948436114


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.29463085 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.33456379 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.09001297 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.85776529);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.71024291);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.91909111);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.58228834 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.07521210 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.90280848 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.00123620 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.08435489);	// Prevent hyperextension
}
//energy: 9.94933 [J/(m*kg)]
//speed : 1.32632 [m/s]
//period: 0.484107 [s]
//length: 0.640035 [m]
//one leg stance phase: 30.9883 [%]
//double support: 0 [%]
//tot flight: 38.0266 [%]

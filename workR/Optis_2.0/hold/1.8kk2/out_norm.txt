fitness: 1683.61894678596

norms:
0.249173118937731
0.15386208444746
0.171085654094289
0.88759512493054
0.672236966091044
0.763360699434596
0.528991937655097
0.572721366087672
0.199981474349464
0.059921665758576
0.719419361426793


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24917312 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.15386208 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.17108565 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.88759512);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.67223697);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.76336070);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.52899194 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.57272137 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.19998147 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.05992167 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.71941936);	// Prevent hyperextension
}

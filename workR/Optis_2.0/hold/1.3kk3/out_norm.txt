fitness: 1921.56381455375

norms:
0.253574096774633
0.242137129231842
0.412868870709057
0.151516464692857
0.72914550359708
0.030654989107748
0.313124707004638
0.665824076300891
0.785301616884998
0.353175277495353
0.613609596283701


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.25357410 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.24213713 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.41286887 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.15151646);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.72914550);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.03065499);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.31312471 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.66582408 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.78530162 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.35317528 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.61360960);	// Prevent hyperextension
}
//energy: 8.97732 [J/(m*kg)]
//speed : 1.29445 [m/s]
//period: 0.47833 [s]
//length: 0.606225 [m]
//one leg stance phase: 31.4008 [%]
//double support: 0 [%]
//tot flight: 37.205 [%]

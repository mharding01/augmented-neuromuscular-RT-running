fitness: 1875.95733378771

norms:
0.31579695870672
0.475150023177413
0.0209098978598937
0.880496197004071
0.244133962692096
0.206717897868082
0.59155203083628
0.0437189535673985
0.531834025060842
0.104887339957458
0.783062483490332


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.31579696 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.47515002 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.02090990 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.88049620);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.24413396);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.20671790);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.59155203 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.04371895 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.53183403 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.10488734 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.78306248);	// Prevent hyperextension
}

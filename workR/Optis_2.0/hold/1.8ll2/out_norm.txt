fitness: 1851.3654655095

norms:
0.240920254748349
0.0818172812858091
0.324131763274459
0.869020783967718
0.789181272531932
0.644901781251387
0.641298916972067
0.901852749988448
0.14045995676707
0.608077541605902
0.550642186161739


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24092025 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.08181728 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.32413176 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.86902078);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.78918127);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.64490178);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.64129892 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.90185275 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.14045996 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.60807754 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.55064219);	// Prevent hyperextension
}
//energy: 8.33445 [J/(m*kg)]
//speed : 1.67524 [m/s]
//period: 0.440017 [s]
//length: 0.740882 [m]
//one leg stance phase: 34.0909 [%]
//double support: 0 [%]
//tot flight: 31.8277 [%]


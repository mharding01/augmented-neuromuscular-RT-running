fitness: 1933.3666318728

norms:
0.332072594876123
0.52209405440947
0.0670237778474527
0.686816374665998
0.0738430646272329
0.871149179690854
0.669317003989164
0.56778409870504
0.473594459517354
0.285987328832702
0.751843923386081


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.33207259 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.52209405 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.06702378 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.68681637);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.07384306);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.87114918);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.66931700 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.56778410 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.47359446 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.28598733 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.75184392);	// Prevent hyperextension
}
//energy: 10.5964 [J/(m*kg)]
//speed : 1.23106 [m/s]
//period: 0.520168 [s]
//length: 0.642069 [m]
//one leg stance phase: 28.8417 [%]
//double support: 0 [%]
//tot flight: 42.3194 [%]


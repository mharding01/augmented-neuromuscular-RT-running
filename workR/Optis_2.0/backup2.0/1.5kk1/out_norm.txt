fitness: 2200.21803991548

norms:
0.269923690137357
0.247441088114391
0.323502312053589
0.394076120797091
0.107328220485402
0.250335920445999
0.309026896276792
0.856310368430018
0.208491121543643
0.128893688607677
0.991600094472458


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26992369 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.24744109 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.32350231 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.39407612);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.10732822);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.25033592);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.30902690 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.85631037 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.20849112 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.12889369 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.99160009);	// Prevent hyperextension
}
//energy: 8.10683 [J/(m*kg)]
//speed : 1.49739 [m/s]
//period: 0.455753 [s]
//length: 0.680773 [m]
//one leg stance phase: 32.9132 [%]
//double support: 0 [%]
//tot flight: 34.1666 [%]

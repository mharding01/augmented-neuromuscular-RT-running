fitness: 2159.46289755958

norms:
0.270569245681345
0.169084379594514
0.0283146697333267
0.495571376048944
0.0675476770226336
0.419949639372586
0.708285539649852
0.532769708439902
0.928652163270163
0.273339203357914
0.0873217288232701


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.27056925 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.16908438 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.02831467 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.49557138);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.06754768);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.41994964);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.70828554 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.53276971 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.92865216 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.27333920 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.08732173);	// Prevent hyperextension
}
//energy: 9.2441 [J/(m*kg)]
//speed : 1.36168 [m/s]
//period: 0.463988 [s]
//length: 0.632072 [m]
//one leg stance phase: 32.3314 [%]
//double support: 0 [%]
//tot flight: 35.332 [%]



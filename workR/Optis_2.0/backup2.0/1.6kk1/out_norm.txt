fitness: 2198.8109348027

norms:
0.261317803409477
0.286207866430033
0.00587950460201439
0.762847747416914
0.216415192457869
0.443131642730557
0.397204814925722
0.95171572657842
0.177668022090234
0.0742261245187894
0.0180774836055653


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26131780 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.28620787 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.00587950 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.76284775);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.21641519);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.44313164);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.39720481 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.95171573 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.17766802 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.07422612 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.01807748);	// Prevent hyperextension
}
//energy: 8.25704 [J/(m*kg)]
//speed : 1.62313 [m/s]
//period: 0.443378 [s]
//length: 0.712019 [m]
//one leg stance phase: 33.8322 [%]
//double support: 0 [%]
//tot flight: 32.3174 [%]

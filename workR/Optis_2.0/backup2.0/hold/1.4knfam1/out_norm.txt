fitness: 2079.51172614322

norms:
0.271125679136504
0.245722991282058
0.0500995509862526
0.827963200878867
0.96818840824071
0.695165923789553
0.595219029295388
0.0968967617526785
0.587439603691742
0.0865235412844553
0.793766696007901


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.27112568 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.24572299 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.05009955 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.82796320);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.96818841);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.69516592);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.59521903 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.09689676 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.58743960 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.08652354 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.79376670);	// Prevent hyperextension
}

fitness: 2166.11650167464

norms:
0.257386251487479
0.260794363033317
0.096344473400484
0.345167198799549
0.499903910993232
0.87577755010219
0.185126170324812
0.327463671589122
0.421514391986684
0.196485348711799
0.508336300505708


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.25738625 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.26079436 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.09634447 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.34516720);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.49990391);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.87577755);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.18512617 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.32746367 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.42151439 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.19648535 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.50833630);	// Prevent hyperextension
}
//energy: 10.2181 [J/(m*kg)]
//speed : 1.30048 [m/s]
//period: 0.437076 [s]
//length: 0.583608 [m]
//one leg stance phase: 34.3294 [%]
//double support: 0 [%]
//tot flight: 31.3435 [%]


fitness: 2047.24552451293

norms:
0.25861590869615
0.170976499716581
0.293721519971314
0.754783347418032
0.607892794920017
0.541029832221688
0.400435540836696
0.321363398216481
0.680775896886394


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.25861591 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.17097650 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.29372152 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.75478335);
    g_osc->opti_set_k_HFLrun2( 0.60789279);
    g_osc->opti_set_k_HAMrun( 0.54102983);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.40043554 );	// TODO: Original bounds
	g_osc->opti_set_P_G_SOL_TA( 0.32136340 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.68077590 );
}

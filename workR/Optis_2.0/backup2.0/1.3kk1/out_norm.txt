fitness: 2167.555988504

norms:
0.263068960930178
0.275313143535078
0.272199902695449
0.885727648638374
0.511158287694726
0.394217365932949
0.233205433043568
0.669255760882459
0.0653246839631156
0.198681940355405
0.533898947849466


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26306896 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.27531314 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.27219990 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.88572765);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.51115829);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.39421737);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.23320543 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.66925576 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.06532468 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.19868194 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.53389895);	// Prevent hyperextension
}
//energy: 9.83678 [J/(m*kg)]
//speed : 1.29193 [m/s]
//period: 0.449588 [s]
//length: 0.58054 [m]
//one leg stance phase: 33.3669 [%]
//double support: 0 [%]
//tot flight: 33.2614 [%]


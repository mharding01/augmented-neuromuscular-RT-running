fitness: 2198.98315595144

norms:
0.249626674642252
0.144060123780282
0.215947470523278
0.385320427860341
0.695848062027579
0.869051247136482
0.618733043265699
0.683459752298753
0.136094330565922
0.106174059508449
0.432260821575866


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24962667 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.14406012 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.21594747 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.38532043);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.69584806);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.86905125);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.61873304 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.68345975 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.13609433 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.10617406 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.43226082);	// Prevent hyperextension
}
//energy: 8.04538 [J/(m*kg)]
//speed : 1.71022 [m/s]
//period: 0.429306 [s]
//length: 0.737815 [m]
//one leg stance phase: 34.941 [%]
//double support: 0 [%]
//tot flight: 30.1198 [%]


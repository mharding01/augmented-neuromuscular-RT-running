fitness: 2191.81180709111

norms:
0.279460088053942
0.217459309564465
0.212287455747983
0.700430486988831
0.0658876404109835
0.324585441012375
0.504959463193385
0.795499999953178
0.508519248528312
0.0497863609363936
0.0660804782598978


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.27946009 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.21745931 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.21228746 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.70043049);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.06588764);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.32458544);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.50495946 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.79550000 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.50851925 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.04978636 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.06608048);	// Prevent hyperextension
}
//energy: 8.55023 [J/(m*kg)]
//speed : 1.40221 [m/s]
//period: 0.468613 [s]
//length: 0.655757 [m]
//one leg stance phase: 32.0107 [%]
//double support: 0 [%]
//tot flight: 35.9527 [%]

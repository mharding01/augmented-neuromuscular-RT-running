fitness: 2178.08813324697

norms:
0.280924658163543
0.353740933576162
0.0982714441599187
0.872911705584752
0.3515254168398
0.3569887191788
0.689879102649763
0.134609932007202
0.34692936169024
0.0129341877262952
0.733056414778192


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.28092466 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.35374093 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.09827144 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.87291171);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.35152542);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.35698872);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.68987910 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.13460993 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.34692936 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.01293419 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.73305641);	// Prevent hyperextension
}
//energy: 9.29217 [J/(m*kg)]
//speed : 1.42664 [m/s]
//period: 0.467462 [s]
//length: 0.666522 [m]
//one leg stance phase: 32.0897 [%]
//double support: 0 [%]
//tot flight: 35.8266 [%]

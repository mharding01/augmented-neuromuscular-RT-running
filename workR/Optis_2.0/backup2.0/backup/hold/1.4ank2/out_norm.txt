fitness: 2691.22963986611

norms:
0.257122743250407
0.256861317491675
0.136753249320176
0.768501689064128
0.720415686798274
0.611133564939813
0.127206796062125
0.584514623920853
0.169672506002396


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.25712274 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.25686132 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.13675325 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.76850169);
    g_osc->opti_set_k_HFLrun2( 0.72041569);
    g_osc->opti_set_k_HAMrun( 0.61113356);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.12720680 );	// TODO: Original bounds
	g_osc->opti_set_P_G_SOL_TA( 0.58451462 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.16967251 );
}

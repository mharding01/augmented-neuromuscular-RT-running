fitness: 2181.79534421468

norms:
0.243830688286026
0.140835491152687
0.0135753961373256
0.77406001335408
0.835419317655619
0.49764556337797
0.692897485979983
0.72812941574025
0.144397207623266
0.0842522466982581
0.468629260172264


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24383069 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.14083549 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.01357540 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.77406001);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.83541932);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.49764556);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.69289749 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.72812942 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.14439721 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.08425225 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.46862926);	// Prevent hyperextension
}
//energy: 7.99943 [J/(m*kg)]
//speed : 1.695 [m/s]
//period: 0.434943 [s]
//length: 0.739874 [m]
//one leg stance phase: 34.4876 [%]
//double support: 0 [%]
//tot flight: 31.0262 [%]

fitness: 2147.68327508251

norms:
0.320666876325084
0.522253381762588
0.115386469414777
0.731290323083541
0.149361873128091
0.789945423002476
0.839353609978805
0.465760592860538
0.504903467469305
0.169376688136098
0.342552238901509


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.32066688 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.52225338 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.11538647 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.73129032);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.14936187);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.78994542);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.83935361 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.46576059 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.50490347 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.16937669 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.34255224);	// Prevent hyperextension
}

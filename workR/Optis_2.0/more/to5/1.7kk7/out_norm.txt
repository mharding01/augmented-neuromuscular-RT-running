fitness: 2111.42699945286

norms:
0.242656130972992
0.115205575590936
0.140108446518781
0.796567186856069
0.811655563649136
0.565072250271361
0.529599607279307
0.797459211979446
0.76666678922669
0.134649557020893
0.470712475210582


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24265613 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.11520558 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.14010845 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.79656719);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.81165556);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.56507225);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.52959961 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.79745921 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.76666679 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.13464956 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.47071248);	// Prevent hyperextension
}

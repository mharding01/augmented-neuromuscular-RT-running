fitness: 2199.15001131732

norms:
0.260263319921736
0.102468125521109
0.227696938979254
0.502094351683515
0.0663924101747287
0.311125626954195
0.339257427371439
0.97143758746723
0.679263857417532
0.155677830432168
0.210022784203884


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26026332 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.10246813 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.22769694 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.50209435);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.06639241);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.31112563);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.33925743 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.97143759 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.67926386 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.15567783 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.21002278);	// Prevent hyperextension
}

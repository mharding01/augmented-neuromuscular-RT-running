fitness: 2189.88878263596

norms:
0.258259162320982
0.287273573764481
0.179380289048578
0.894225299913704
0.468642476977348
0.449709282938751
0.515837374460356
0.932034472554164
0.767361427558307
0.379095421821871
0.645612848543272


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.25825916 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.28727357 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.17938029 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.89422530);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.46864248);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.44970928);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.51583737 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.93203447 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.76736143 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.37909542 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.64561285);	// Prevent hyperextension
}

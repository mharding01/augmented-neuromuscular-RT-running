fitness: 2190.38720529606

norms:
0.2818071977615
0.266051896844311
0.261830306540554
0.902032734149644
0.0813395233614356
0.271185528546135
0.636244549611512
0.665817931961628
0.721113386787397
0.0872576797286479
0.0248890333500539


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.28180720 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.26605190 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.26183031 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.90203273);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.08133952);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.27118553);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.63624455 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.66581793 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.72111339 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.08725768 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.02488903);	// Prevent hyperextension
}

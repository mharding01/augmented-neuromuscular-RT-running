fitness: 2196.16625946746

norms:
0.2607712089243
0.103185469322105
0.127599894704099
0.699536290709186
0.0734583802557522
0.625482233235269
0.48508549441589
0.605070927923425
0.819116155819208
0.0245722627433282
0.26457746392817


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26077121 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.10318547 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.12759989 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.69953629);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.07345838);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.62548223);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.48508549 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.60507093 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.81911616 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.02457226 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.26457746);	// Prevent hyperextension
}

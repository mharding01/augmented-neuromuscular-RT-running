fitness: 2190.0299336631

norms:
0.279335068758648
0.141007523475881
0.188181649545711
0.783813487891059
0.0461914932282267
0.939186343627032
0.474008537773207
0.662613221837267
0.422870158263103
0.04264861816903
0.762319789004276


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.27933507 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.14100752 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.18818165 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.78381349);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.04619149);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.93918634);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.47400854 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.66261322 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.42287016 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.04264862 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.76231979);	// Prevent hyperextension
}

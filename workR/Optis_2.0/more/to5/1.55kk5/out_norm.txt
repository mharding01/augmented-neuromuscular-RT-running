fitness: 2203.3246656808

norms:
0.264361663988215
0.157078073557312
0.369829296590562
0.550574657323896
0.0918439931197169
0.351552746449422
0.425519479973643
0.436595867186638
0.116065533876366
0.378964566885612
0.302193712747408


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26436166 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.15707807 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.36982930 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.55057466);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.09184399);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.35155275);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.42551948 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.43659587 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.11606553 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.37896457 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.30219371);	// Prevent hyperextension
}

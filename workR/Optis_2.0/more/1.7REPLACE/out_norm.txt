fitness: 2110.88249833545

norms:
0.236033725391477
0.118802751253018
0.0466448767124031
0.574636868018689
0.93868761829629
0.287496334986424
0.732820033070521
0.859279205419449
0.845538275017378
0.674240347213484
0.691535864324881


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.23603373 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.11880275 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.04664488 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.57463687);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.93868762);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.28749633);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.73282003 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.85927921 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.84553828 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.67424035 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.69153586);	// Prevent hyperextension
}
//energy: 8.4321 [J/(m*kg)]
//speed : 1.6611 [m/s]
//period: 0.434579 [s]
//length: 0.719787 [m]
//one leg stance phase: 34.5168 [%]
//double support: 0 [%]
//tot flight: 30.9634 [%]

fitness: 2185.09870425695

norms:
0.263619000242827
0.292240502811598
0.272399598092934
0.672384929600013
0.5940643476051
0.927447732187866
0.895535532476042
0.996419866519261
0.941668413919147
0.389893859617412
0.496824067981534


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26361900 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.29224050 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.27239960 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.67238493);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.59406435);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.92744773);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.89553553 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.99641987 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.94166841 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.38989386 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.49682407);	// Prevent hyperextension
}
//energy: 8.78572 [J/(m*kg)]
//speed : 1.64418 [m/s]
//period: 0.450097 [s]
//length: 0.736541 [m]
//one leg stance phase: 33.3271 [%]
//double support: 0 [%]
//tot flight: 33.3474 [%]



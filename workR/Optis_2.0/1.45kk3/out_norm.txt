fitness: 2181.56960771957

norms:
0.280798938786833
0.376969486358878
0.213926205420413
0.754532945587808
0.376220599746519
0.442923992951584
0.46671403290256
0.126237000974823
0.208379636256888
0.0830278420005565
0.972146206347694


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.28079894 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.37696949 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.21392621 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.75453295);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.37622060);	// Higher bound
    g_osc->opti_set_k_HAMrun3( 0.44292399);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.46671403 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.12623700 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.20837964 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.08302784 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.97214621);	// Prevent hyperextension
}
//energy: 9.18327 [J/(m*kg)]
//speed : 1.47141 [m/s]
//period: 0.465474 [s]
//length: 0.686419 [m]
//one leg stance phase: 32.2278 [%]
//double support: 0 [%]
//tot flight: 35.5428 [%]

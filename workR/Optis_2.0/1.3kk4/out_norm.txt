fitness: 2162.7608211188

norms:
0.294388417216455
0.374289963335067
0.0610917375025445
0.77833629408983
0.169670902518103
0.897822639416944
0.794193030949479
0.172172903248806
0.620749857653612
0.00820935975482301
0.898545590572137


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.29438842 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.37428996 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.06109174 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.77833629);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.16967090);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.89782264);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.79419303 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.17217290 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.62074986 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.00820936 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.89854559);	// Prevent hyperextension
}
//energy: 9.87526 [J/(m*kg)]
//speed : 1.31473 [m/s]
//period: 0.481414 [s]
//length: 0.634628 [m]
//one leg stance phase: 31.1683 [%]
//double support: 0 [%]
//tot flight: 37.638 [%]

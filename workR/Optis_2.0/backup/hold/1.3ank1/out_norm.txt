fitness: 2583.5873724214

norms:
0.243511565977128
0.0906241215468103
0.276425069353876
0.939528546965284
0.669041034068199
0.855164135965185
0.043893473572277
0.767473237441498
0.0812945804679908


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.24351157 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.09062412 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.27642507 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.93952855);
    g_osc->opti_set_k_HFLrun2( 0.66904103);
    g_osc->opti_set_k_HAMrun( 0.85516414);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.04389347 );	// TODO: Original bounds
	g_osc->opti_set_P_G_SOL_TA( 0.76747324 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.08129458 );
}

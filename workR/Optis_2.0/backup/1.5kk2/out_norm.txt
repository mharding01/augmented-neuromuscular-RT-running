fitness: 2194.64933080063

norms:
0.267930186817081
0.31375011418854
0.0993122759413842
0.63611331439391
0.607359200177404
0.251200145262727
0.371040974581048
0.856082799271495
0.209943062946028
0.000736091897166876
0.861309881596178


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.26793019 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.31375011 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.09931228 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.63611331);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.60735920);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.25120015);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.37104097 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.85608280 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.20994306 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.00073609 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.86130988);	// Prevent hyperextension
}
//energy: 8.4237 [J/(m*kg)]
//speed : 1.52626 [m/s]
//period: 0.454915 [s]
//length: 0.693592 [m]
//one leg stance phase: 32.9744 [%]
//double support: 0 [%]
//tot flight: 34.055 [%]


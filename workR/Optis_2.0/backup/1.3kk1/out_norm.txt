fitness: 2113.58890379819

norms:
0.308679732236885
0.300096280258928
0.222166765409702
0.639460201393334
0.0515239219291297
0.930636232060037
0.483223167220099
0.8383543297598
0.867776802473935
0.30761640590692
0.565447489298156


/*
 * The following lines present the results file with the normalized parameters.
 * Do not use it directly, its purpose is just to show the match between the parameters
 * to optimize and their normalized optimized values.
 */

#include "OptiNorms.hh"
#include "StimWangCtrl.hh"
#include "JointsInit.hh"
#include "MatsuokaSixN.hh"

/*! \brief constructor
 */
OptiNorms::OptiNorms()
{

}

/*! \brief destructor
 */
OptiNorms::~OptiNorms()
{

}

/*! \brief set optimization parameters
 */
void OptiNorms::set_opti()
{
    StimWangCtrl *stim_wang = static_cast<StimWangCtrl*>(stim_ctrl);
    MatsuokaSixN *g_osc = static_cast<MatsuokaSixN*>(stim_wang->get_ghost_osc());

    // Uses "opti_set" function family in order to delay setting these params
    // until after Ctrl construction
    g_osc->opti_set_P_tau(0.30867973 ); // Taken from master commit: "All_1 results, 1459 score"
	// HIP CONTROL
	g_osc->opti_set_P_theta_trunk( 0.30009628 ); // TODO: trunk lean 
	g_osc->opti_set_P_theta_hip( 0.22216677 ); // TODO: made its lower bound smaller, come back to this later
    
	// CPG CONTROL
    g_osc->opti_set_k_HFLrun1( 0.63946020);	// Higher bound
    g_osc->opti_set_k_HFLrun2( 0.05152392);	// Higher bound
    g_osc->opti_set_k_HAMrun( 0.93063623);

	// ANKLE CONTROL
	g_osc->opti_set_P_G_SOL( 0.48322317 );	// Lower bounds
	g_osc->opti_set_P_G_SOL_TA( 0.83835433 );// Prevent tripping
	g_osc->opti_set_P_G_GAS( 0.86777680 );
	
	// KNEE CONTROL
	g_osc->opti_set_P_G_VAS( 0.30761641 );	// Shock absorption, v. thrust
	g_osc->opti_set_P_k_theta( 0.56544749);	// Prevent hyperextension
}
//energy: 9.76359 [J/(m*kg)]
//speed : 1.28492 [m/s]
//period: 0.498897 [s]
//length: 0.648528 [m]
//one leg stance phase: 30.0942 [%]
//double support: 0 [%]
//tot flight: 39.8268 [%]

